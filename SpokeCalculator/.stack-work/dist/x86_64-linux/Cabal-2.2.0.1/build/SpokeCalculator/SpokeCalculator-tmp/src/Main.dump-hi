
==================== FINAL INTERFACE ====================
2019-05-30 10:10:02.204335243 UTC

interface main:Main 8043
  interface hash: 54caa7154e3bf305e4d8f4aface0c99e
  ABI hash: 0b40fd95376863fc606585aaf70cd42c
  export-list hash: b4a8bd457c6a824a4e34531217ccb285
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c7f9086a2f5c81be846f12374ab17576
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.aC32Narrow
  Main.aC32Narrow_dT411_32
  Main.aC32Wide
  Main.aC32Wide_dT411_32
  Main.dT411_32
  Main.display
  Main.dtSpline24
  Main.dtSpline24Rear
  Main.dtSpline24Rear_org
  Main.dtSpline24Rear_rx38D
  Main.erd
  Main.greet
  Main.main
  Main.myPoints
  Main.norm
  Main.numberOfHubHoles
  Main.p1
  Main.pc1
  Main.phiOneHub
  Main.pointDistance
  Main.printConfig
  Main.rx38D
  Main.spline24
  Main.spokeLengthStr
  Main.spokeLengths
  Main.threeCrossed32
  Main.toCartesian
  Main.zDists
  Main.Coords{Main.CartesianCoords Main.CylinderCoords phi r x y z}
  Main.Flange{Main.JBendFlange Main.StraightPullFlange distance flangeDiameter flangeHoles offSetFromMiddle}
  Main.Hub{Main.Hub leftFlange rightFlange width}
  Main.LeftFlange
  Main.NumberOfPairsPerSide
  Main.Pattern{Main.CrossedPattern numberOfPairsPerSide rimIntervals}
  Main.RightFlange
  Main.Rim{Main.Rim depth outerDiameter rimHoles rimOffSet}
  Main.RimIntervals
  Main.Wheel{Main.Wheel hub name pattern rim}
module dependencies:
package dependencies: GLURaw-2.0.0.4 GLUT-2.7.0.14
                      ObjectName-1.1.0.1 OpenGL-3.0.2.2 OpenGLRaw-3.3.1.0
                      StateVar-1.1.1.1 array-0.5.2.0 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      fixed-0.2.1.1 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 half-0.3
                      integer-gmp-1.0.2.0 pretty-1.1.3.6 stm-2.4.5.0
                      template-haskell-2.13.0.0 text-1.2.3.0 time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type half-0.3:Numeric.Half
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text
import  -/  GLUT-2.7.0.14:Graphics.UI.GLUT 6c30ebbf5957dc926a43429daf7f9aff
import  -/  GLUT-2.7.0.14:Graphics.UI.GLUT.Callbacks.Window 056cf3e6a54650a7b18bb70722f35ee5
import  -/  OpenGL-3.0.2.2:Graphics.Rendering.OpenGL 6c80ab72f9beffe5b24fa23656050f15
import  -/  OpenGL-3.0.2.2:Graphics.Rendering.OpenGL.GL.BeginEnd 8a5f4291ad56af4d3455345e9dcebde7
import  -/  OpenGL-3.0.2.2:Graphics.Rendering.OpenGL.GL.FlushFinish af2586f3c3f60510eca28ba9c3ecc3af
import  -/  OpenGL-3.0.2.2:Graphics.Rendering.OpenGL.GL.Framebuffer cae92770743cf5af9cf320892254dccb
import  -/  OpenGL-3.0.2.2:Graphics.Rendering.OpenGL.GL.PrimitiveMode b445e72b12d2d7923f1fad573c7c000f
import  -/  OpenGL-3.0.2.2:Graphics.Rendering.OpenGL.GL.Tensor 84f3b65a6fec2674503117a169397341
import  -/  OpenGL-3.0.2.2:Graphics.Rendering.OpenGL.GL.VertexSpec 1aacac0a112c66520c47ba37db1b62d7
import  -/  OpenGLRaw-3.3.1.0:Graphics.GL.Types c06737da8df67bc34690898a6a2f49c5
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Float 99c69d365bb2607725a22530ce1ca4b4
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  time-1.8.0.2:Data.Time f7ed41af638d3beef98547dc5abd1ceb
import  -/  time-1.8.0.2:Data.Time.Clock.POSIX c73091c8fa3b2263d82c931f880a46c8
bc0c866f62e2c36f49cf6132852a4e6b
  $fShowCoords :: GHC.Show.Show Main.Coords
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Coords
                  Main.$fShowCoords_$cshowsPrec
                  Main.$fShowCoords_$cshow
                  Main.$fShowCoords_$cshowList -}
bc0c866f62e2c36f49cf6132852a4e6b
  $fShowCoords1 :: Main.Coords -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Main.Coords) -> Main.$w$cshowsPrec 0# w) -}
8cd39a1aec435258477043da8f96d482
  $fShowCoords2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
bc0c866f62e2c36f49cf6132852a4e6b
  $fShowCoords_$cshow :: Main.Coords -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: Main.Coords) ->
                 Main.$fShowCoords_$cshowsPrec
                   Main.$fShowCoords2
                   x2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bc0c866f62e2c36f49cf6132852a4e6b
  $fShowCoords_$cshowList :: [Main.Coords] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Coords]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Coords Main.$fShowCoords1 ls s) -}
bc0c866f62e2c36f49cf6132852a4e6b
  $fShowCoords_$cshowsPrec ::
    GHC.Types.Int -> Main.Coords -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.Coords) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$w$cshowsPrec ww1 w1 }) -}
c98c0cb16cd2f56dadaa9cb176a6c28f
  $fShowFlange :: GHC.Show.Show Main.Flange
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Flange
                  Main.$fShowFlange_$cshowsPrec
                  Main.$fShowFlange_$cshow
                  Main.$fShowFlange_$cshowList -}
c98c0cb16cd2f56dadaa9cb176a6c28f
  $fShowFlange1 :: Main.Flange -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Main.Flange) -> Main.$w$cshowsPrec1 0# w) -}
c98c0cb16cd2f56dadaa9cb176a6c28f
  $fShowFlange_$cshow :: Main.Flange -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: Main.Flange) ->
                 Main.$fShowFlange_$cshowsPrec
                   Main.$fShowCoords2
                   x2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c98c0cb16cd2f56dadaa9cb176a6c28f
  $fShowFlange_$cshowList :: [Main.Flange] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Flange]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Flange Main.$fShowFlange1 ls s) -}
c98c0cb16cd2f56dadaa9cb176a6c28f
  $fShowFlange_$cshowsPrec ::
    GHC.Types.Int -> Main.Flange -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.Flange) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$w$cshowsPrec1 ww1 w1 }) -}
1c4581458fa7c85f1188c7d2914802d0
  $fShowHub :: GHC.Show.Show Main.Hub
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Hub
                  Main.$fShowHub_$cshowsPrec
                  Main.$fShowHub_$cshow
                  Main.$fShowHub_$cshowList -}
1c4581458fa7c85f1188c7d2914802d0
  $fShowHub1 :: Main.Hub -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U(U))>,
     Unfolding: (\ (w :: Main.Hub) ->
                 case w of ww { Main.Hub ww1 ww2 ww3 ->
                 Main.$w$cshowsPrec2 0# ww1 ww2 ww3 }) -}
d16c90b47ec8abd9cc9561513644d4e3
  $fShowHub2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
9ea5b660c63557fd1edf91382f3da392
  $fShowHub3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("width = "#) -}
ea3446fe7b693a22cfb874ba539616b6
  $fShowHub4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("rightFlange = "#) -}
1daf7835ce39660eabde7961ba96e9c3
  $fShowHub5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("leftFlange = "#) -}
552872150870d56f1466344ad0d9cab2
  $fShowHub6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Hub {"#) -}
1c4581458fa7c85f1188c7d2914802d0
  $fShowHub_$cshow :: Main.Hub -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x2 :: Main.Hub) ->
                 Main.$fShowHub_$cshowsPrec
                   Main.$fShowCoords2
                   x2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1c4581458fa7c85f1188c7d2914802d0
  $fShowHub_$cshowList :: [Main.Hub] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Hub]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Hub Main.$fShowHub1 ls s) -}
1c4581458fa7c85f1188c7d2914802d0
  $fShowHub_$cshowsPrec ::
    GHC.Types.Int -> Main.Hub -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.Hub) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Hub ww3 ww4 ww5 ->
                 Main.$w$cshowsPrec2 ww1 ww3 ww4 ww5 } }) -}
b2ceb6175a7a748145e4cd97c05918ab
  $fShowPattern :: GHC.Show.Show Main.Pattern
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Pattern
                  Main.$fShowPattern_$cshowsPrec
                  Main.$fShowPattern_$cshow
                  Main.$fShowPattern_$cshowList -}
b2ceb6175a7a748145e4cd97c05918ab
  $fShowPattern1 :: Main.Pattern -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U(U),1*U(U))><L,U>,
     Unfolding: (\ (w :: Main.Pattern) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.CrossedPattern ww1 ww2 ->
                 Main.$w$cshowsPrec3 0# ww1 ww2 w1 }) -}
9f817a99a23f738f410f7da7743d9605
  $fShowPattern2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("rimIntervals = "#) -}
9c56cfff93c2505e39aee7d66ab8ce20
  $fShowPattern3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("numberOfPairsPerSide = "#) -}
e53c6915bfac3a432576b6e1c2d7b9c6
  $fShowPattern4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowPattern5) -}
08ec9c18a072d54b268cb5bb324635ef
  $fShowPattern5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CrossedPattern {"#) -}
37678760b94d3597859c96045e3a1f59
  $fShowPattern6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowHub2) -}
b2ceb6175a7a748145e4cd97c05918ab
  $fShowPattern_$cshow :: Main.Pattern -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Pattern) ->
                 case w of ww { Main.CrossedPattern ww1 ww2 ->
                 Main.$w$cshow ww1 ww2 }) -}
b2ceb6175a7a748145e4cd97c05918ab
  $fShowPattern_$cshowList :: [Main.Pattern] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Pattern]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Pattern Main.$fShowPattern1 ls s) -}
b2ceb6175a7a748145e4cd97c05918ab
  $fShowPattern_$cshowsPrec ::
    GHC.Types.Int -> Main.Pattern -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Pattern)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.CrossedPattern ww3 ww4 ->
                 Main.$w$cshowsPrec3 ww1 ww3 ww4 w2 } }) -}
f9318e78348d8804db85a39a2cebefde
  $tc'CartesianCoords :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8471793747311907725##
                   14531115183303720281##
                   Main.$trModule
                   Main.$tc'CartesianCoords2
                   0#
                   Main.$tc'CartesianCoords1) -}
6544f819d754c11de820c9d49912be71
  $tc'CartesianCoords1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7467fe6507f0831d257029697294232c
  $tc'CartesianCoords2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'CartesianCoords3) -}
530628a0dc3e7438b779efb7889835d8
  $tc'CartesianCoords3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CartesianCoords"#) -}
7144a1595c231b5b2a6c9193c925a277
  $tc'CrossedPattern :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6707743954797828558##
                   15019355433471362766##
                   Main.$trModule
                   Main.$tc'CrossedPattern2
                   0#
                   Main.$tc'CrossedPattern1) -}
f2bc9998442c1de32728120f033e8799
  $tc'CrossedPattern1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0a188dd552ff98f4965636d4bc4236b1
  $tc'CrossedPattern2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'CrossedPattern3) -}
064345c46b810562345863700bab6c2b
  $tc'CrossedPattern3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CrossedPattern"#) -}
f615fb7eb13b485a63b136a9ae5fbcfa
  $tc'CylinderCoords :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17735544042154525708##
                   8382003245421978148##
                   Main.$trModule
                   Main.$tc'CylinderCoords1
                   0#
                   Main.$tc'CartesianCoords1) -}
5e16464b666152878285abe71678d2e4
  $tc'CylinderCoords1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'CylinderCoords2) -}
a175f70817a699c34c2af0ee07239afb
  $tc'CylinderCoords2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CylinderCoords"#) -}
fc34392c795ae70d8a9228f573cfbae3
  $tc'Hub :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1702719005335903091##
                   2721996402305383719##
                   Main.$trModule
                   Main.$tc'Hub2
                   0#
                   Main.$tc'Hub1) -}
2fe1947a6c62415451f3ac8923c044a8
  $tc'Hub1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a60f250a64392878cef069a566567876
  $tc'Hub2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Hub3) -}
ae244a71f11cc60a99bef5f117858ff6
  $tc'Hub3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Hub"#) -}
29d178c4f870e22dde37d8e0151e1dce
  $tc'JBendFlange :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15165740503871526357##
                   2658730196253200340##
                   Main.$trModule
                   Main.$tc'JBendFlange2
                   0#
                   Main.$tc'JBendFlange1) -}
013eb743499e168228a18ec8fd69e4c6
  $tc'JBendFlange1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b579741698d427392f2a4d47d453be1d
  $tc'JBendFlange2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'JBendFlange3) -}
9b8069053faf251556b4e8288062cb95
  $tc'JBendFlange3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'JBendFlange"#) -}
5016851d893421246ca87212acdb1a4a
  $tc'Rim :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12719285592150171291##
                   16817606418641032581##
                   Main.$trModule
                   Main.$tc'Rim2
                   0#
                   Main.$tc'Rim1) -}
25f8f58003aadd08d3318831c9dc1ca9
  $tc'Rim1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8e4d3a300e6a5947f1b0687095fd776b
  $tc'Rim2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Rim3) -}
16f5751e786d8833e822686e027817d2
  $tc'Rim3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Rim"#) -}
f168bd5bd6f1c7da068cedef89ed873c
  $tc'StraightPullFlange :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   995549725984474642##
                   4629607727450633316##
                   Main.$trModule
                   Main.$tc'StraightPullFlange2
                   0#
                   Main.$tc'StraightPullFlange1) -}
4f3e9d4aecc091d9285ce7d373e81c00
  $tc'StraightPullFlange1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9c3161064f2b94e6ff19624c51a57f48
  $tc'StraightPullFlange2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'StraightPullFlange3) -}
3853ba59c58f49c339cf2dd79cd610a0
  $tc'StraightPullFlange3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StraightPullFlange"#) -}
72c564e69743f4a2bf845d32da7a7c1f
  $tc'Wheel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11440003835187604608##
                   14518285150540656778##
                   Main.$trModule
                   Main.$tc'Wheel2
                   0#
                   Main.$tc'Wheel1) -}
96f015c24aac62f219e480f17c3d555f
  $tc'Wheel1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d1795848d6ae6a92e841535f9d04cc5b
  $tc'Wheel2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Wheel3) -}
92355e7e50369209d76a5e4e166e7cbf
  $tc'Wheel3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Wheel"#) -}
be0b38a41fae41893aba340db649216d
  $tcCoords :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   640531310938893680##
                   7326341575650122086##
                   Main.$trModule
                   Main.$tcCoords1
                   0#
                   GHC.Types.krep$*) -}
e2af494d4ad5d7e2fedbd6744def371a
  $tcCoords1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCoords2) -}
5200c25432c644a68edcc9c55ba0266f
  $tcCoords2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Coords"#) -}
1d7de0c289e08e6e62901062ae10af0e
  $tcFlange :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14141470899727167078##
                   15916027012052765739##
                   Main.$trModule
                   Main.$tcFlange1
                   0#
                   GHC.Types.krep$*) -}
cafddc398b7e8ff54f2fd45f7fe5c51a
  $tcFlange1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcFlange2) -}
3885807211e8e520142424d10c2fbf03
  $tcFlange2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Flange"#) -}
ee17aa44239fd3dc80a185e875735f2f
  $tcHub :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   505885228356825712##
                   9908874580911861442##
                   Main.$trModule
                   Main.$tcHub1
                   0#
                   GHC.Types.krep$*) -}
317b9c0f4c44b32b40a07c72047ced5d
  $tcHub1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcHub2) -}
7003c4967b0e1a5bd6378b0a50f79374
  $tcHub2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Hub"#) -}
13cad60144163de0b94da60d84db2bf7
  $tcPattern :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15373492501894651643##
                   9991823187039732949##
                   Main.$trModule
                   Main.$tcPattern1
                   0#
                   GHC.Types.krep$*) -}
98bc79a21620fc6a195a03c0e3a0df20
  $tcPattern1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcPattern2) -}
13529a4efb0396220e9078be93314657
  $tcPattern2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Pattern"#) -}
ed523d7d8ea025201262bd17d18d8ef9
  $tcRim :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1594245925685434621##
                   15317726174553711851##
                   Main.$trModule
                   Main.$tcRim1
                   0#
                   GHC.Types.krep$*) -}
5bbd6954e3c7ac7fecc0c4001c4ed569
  $tcRim1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcRim2) -}
b4108e99084dfb43571d5a444161ad49
  $tcRim2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rim"#) -}
c3f72b8c89abfa3c89867675d8b3ad01
  $tcWheel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4580881595495381989##
                   12869157619254104825##
                   Main.$trModule
                   Main.$tcWheel1
                   0#
                   GHC.Types.krep$*) -}
276127a7cac46a44b3ca84007fa237d7
  $tcWheel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcWheel2) -}
21d197b3dc6f7d55a9d3222265903d3e
  $tcWheel2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Wheel"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
94b36d48a0ade95c5df59720de62d5a8
  $w$cshow :: GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int) (ww1 :: GHC.Types.Int) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Main.$fShowPattern4
                   (GHC.CString.unpackAppendCString#
                      Main.$fShowPattern3
                      (case ww of ww2 { GHC.Types.I# ww3 ->
                       case GHC.Show.$wshowSignedInt
                              0#
                              ww3
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Main.$fShowPattern2
                                    (case ww1 of ww5 { GHC.Types.I# ww6 ->
                                     case GHC.Show.$wshowSignedInt
                                            0#
                                            ww6
                                            Main.$fShowPattern6 of ww4 { (#,#) ww7 ww8 ->
                                     GHC.Types.:
                                       @ GHC.Types.Char
                                       ww7
                                       ww8 } }))) of ww4 { (#,#) ww5 ww6 ->
                       GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))) -}
bc0c866f62e2c36f49cf6132852a4e6b
  $w$cshowsPrec :: GHC.Prim.Int# -> Main.Coords -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
c98c0cb16cd2f56dadaa9cb176a6c28f
  $w$cshowsPrec1 :: GHC.Prim.Int# -> Main.Flange -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
501b5b2548c91aac0bcc0309b6b33a36
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Main.Flange -> Main.Flange -> GHC.Types.Double -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Main.Flange)
                   (ww2 :: Main.Flange)
                   (ww3 :: GHC.Types.Double) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Main.$w$cshowsPrec1 0# ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = Main.$w$cshowsPrec1 0# ww2
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = case ww3 of ww4 { GHC.Types.D# ww5 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble2
                       Main.$fShowCoords2
                       ww5 }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x2 :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Main.$fShowHub6
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowHub5
                           (f (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Main.$fShowHub4
                                    (f1
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          GHC.Show.showCommaSpace1
                                          (GHC.CString.unpackAppendCString#
                                             Main.$fShowHub3
                                             (f2
                                                (GHC.CString.unpackAppendCString#
                                                   Main.$fShowHub2
                                                   x2)))))))))
                   1#
                   -> \ (x2 :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowHub6
                           (GHC.CString.unpackAppendCString#
                              Main.$fShowHub5
                              (f (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Main.$fShowHub4
                                       (f1
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             GHC.Show.showCommaSpace1
                                             (GHC.CString.unpackAppendCString#
                                                Main.$fShowHub3
                                                (f2
                                                   (GHC.CString.unpackAppendCString#
                                                      Main.$fShowHub2
                                                      (GHC.Types.:
                                                         @ GHC.Types.Char
                                                         GHC.Show.$fShow(,)2
                                                         x2))))))))))) }) -}
8cbb19923625d0eb3751a7bc494a9cff
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Main.$fShowPattern4
                        (GHC.CString.unpackAppendCString#
                           Main.$fShowPattern3
                           (case ww1 of ww3 { GHC.Types.I# ww4 ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   ww4
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      GHC.Show.showCommaSpace1
                                      (GHC.CString.unpackAppendCString#
                                         Main.$fShowPattern2
                                         (case ww2 of ww5 { GHC.Types.I# ww6 ->
                                          case GHC.Show.$wshowSignedInt
                                                 0#
                                                 ww6
                                                 (GHC.CString.unpackAppendCString#
                                                    Main.$fShowHub2
                                                    w) of ww7 { (#,#) ww8 ww9 ->
                                          GHC.Types.:
                                            @ GHC.Types.Char
                                            ww8
                                            ww9 } }))) of ww5 { (#,#) ww6 ww7 ->
                            GHC.Types.: @ GHC.Types.Char ww6 ww7 } }))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Main.$fShowPattern4
                           (GHC.CString.unpackAppendCString#
                              Main.$fShowPattern3
                              (case ww1 of ww3 { GHC.Types.I# ww4 ->
                               case GHC.Show.$wshowSignedInt
                                      0#
                                      ww4
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Main.$fShowPattern2
                                            (case ww2 of ww5 { GHC.Types.I# ww6 ->
                                             case GHC.Show.$wshowSignedInt
                                                    0#
                                                    ww6
                                                    (GHC.CString.unpackAppendCString#
                                                       Main.$fShowHub2
                                                       (GHC.Types.:
                                                          @ GHC.Types.Char
                                                          GHC.Show.$fShow(,)2
                                                          w)) of ww7 { (#,#) ww8 ww9 ->
                                             GHC.Types.:
                                               @ GHC.Types.Char
                                               ww8
                                               ww9 } }))) of ww5 { (#,#) ww6 ww7 ->
                               GHC.Types.: @ GHC.Types.Char ww6 ww7 } }))) }) -}
7008ac91d6af8671badebae833e7a904
  $wnorm :: Main.Coords -> GHC.Prim.Double#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
b36c1c13055a8762720037d052383f53
  $wpointDistance :: Main.Coords -> Main.Coords -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: [0] -}
8869a0a8f0d16c832d68ffcd90df3f88
  $wspokeLengths ::
    Main.Hub
    -> Main.Rim
    -> Main.Pattern
    -> (# GHC.Types.Double, GHC.Types.Double #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U,U,1*U(U))><L,U(A,1*U(U),1*U(U),U(U))><L,1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: (\ (ww :: Main.Hub)
                   (ww1 :: Main.Rim)
                   (ww2 :: Main.Pattern) ->
                 let {
                   rimPoint :: GHC.Types.Double
                   = case ww1 of wild { Main.Rim ds ds1 ds2 ds3 ->
                     case ds1 of wild1 { GHC.Types.D# x2 ->
                     case ds2 of wild2 { GHC.Types.D# y2 ->
                     GHC.Types.D#
                       (GHC.Prim./## (GHC.Prim.-## x2 (GHC.Prim.+## y2 y2)) 2.0##) } } }
                 } in
                 let {
                   rimPoint1 :: GHC.Types.Double
                   = case ww2 of wild { Main.CrossedPattern np ds ->
                     case np of wild1 { GHC.Types.I# x2 ->
                     case GHC.Prim./##
                            6.283185307179586##
                            (GHC.Prim.int2Double# (GHC.Prim.*# x2 4#)) of wild2 { DEFAULT ->
                     case ds of wild3 { GHC.Types.I# i ->
                     GHC.Types.D#
                       (GHC.Prim.negateDouble#
                          (GHC.Prim./##
                             (GHC.Prim.*## wild2 (GHC.Prim.int2Double# i))
                             2.0##)) } } } }
                 } in
                 let {
                   rimPoint2 :: Main.Coords
                   = Main.CylinderCoords rimPoint rimPoint1 Main.dtSpline1
                 } in
                 let {
                   ds :: (GHC.Types.Double, GHC.Types.Double)
                   = case ww of ww3 { Main.Hub ww4 ww5 ww6 ->
                     case Main.$wzDists ww4 ww5 ww6 of ww7 { (#,#) ww8 ww9 ->
                     (ww8, ww9) } }
                 } in
                 (# let {
                      lf :: Main.Flange = case ww of wild { Main.Hub ds1 ds2 ds3 -> ds1 }
                    } in
                    case Main.$wpointDistance
                           (Main.CylinderCoords
                              (case lf of wild {
                                 Main.JBendFlange ds1 ds2 ds3
                                 -> case ds2 of wild1 { GHC.Types.D# x2 ->
                                    GHC.Types.D# (GHC.Prim./## x2 2.0##) }
                                 Main.StraightPullFlange ds1 ds2 ds3 ds4
                                 -> case ds2 of wild1 { GHC.Types.D# x2 ->
                                    GHC.Types.D# (GHC.Prim./## x2 2.0##) } })
                              (case lf of wild {
                                 Main.JBendFlange ds1 ds2 ds3
                                 -> case ds1 of wild1 { GHC.Types.I# i ->
                                    case GHC.Prim./##
                                           6.283185307179586##
                                           (GHC.Prim.int2Double# i) of wild2 { DEFAULT ->
                                    GHC.Types.D# (GHC.Prim./## wild2 2.0##) } }
                                 Main.StraightPullFlange ds1 ds2 ds3 ds4
                                 -> case ds1 of wild1 { GHC.Types.I# i ->
                                    case GHC.Prim./##
                                           6.283185307179586##
                                           (GHC.Prim.int2Double# i) of wild2 { DEFAULT ->
                                    GHC.Types.D# (GHC.Prim./## wild2 2.0##) } } })
                              (case ds of wild { (,) zl zr ->
                               case zl of wild1 { GHC.Types.D# x2 ->
                               case ww1 of wild2 { Main.Rim ds1 ds2 ds3 ds4 ->
                               case ds4 of wild3 { GHC.Types.D# y2 ->
                               GHC.Types.D# (GHC.Prim.-## x2 y2) } } } }))
                           rimPoint2 of ww3 { DEFAULT ->
                    GHC.Types.D# ww3 },
                    let {
                      rf :: Main.Flange = case ww of wild { Main.Hub ds1 ds2 ds3 -> ds2 }
                    } in
                    case Main.$wpointDistance
                           (Main.CylinderCoords
                              (case rf of wild {
                                 Main.JBendFlange ds1 ds2 ds3
                                 -> case ds2 of wild1 { GHC.Types.D# x2 ->
                                    GHC.Types.D# (GHC.Prim./## x2 2.0##) }
                                 Main.StraightPullFlange ds1 ds2 ds3 ds4
                                 -> case ds2 of wild1 { GHC.Types.D# x2 ->
                                    GHC.Types.D# (GHC.Prim./## x2 2.0##) } })
                              (case rf of wild {
                                 Main.JBendFlange ds1 ds2 ds3
                                 -> case ds1 of wild1 { GHC.Types.I# i ->
                                    case GHC.Prim./##
                                           6.283185307179586##
                                           (GHC.Prim.int2Double# i) of wild2 { DEFAULT ->
                                    GHC.Types.D# (GHC.Prim./## wild2 2.0##) } }
                                 Main.StraightPullFlange ds1 ds2 ds3 ds4
                                 -> case ds1 of wild1 { GHC.Types.I# i ->
                                    case GHC.Prim./##
                                           6.283185307179586##
                                           (GHC.Prim.int2Double# i) of wild2 { DEFAULT ->
                                    GHC.Types.D# (GHC.Prim./## wild2 2.0##) } } })
                              (case ds of wild { (,) zl zr ->
                               case zr of wild1 { GHC.Types.D# x2 ->
                               case ww1 of wild2 { Main.Rim ds1 ds2 ds3 ds4 ->
                               case ds4 of wild3 { GHC.Types.D# y2 ->
                               GHC.Types.D# (GHC.Prim.+## x2 y2) } } } }))
                           rimPoint2 of ww3 { DEFAULT ->
                    GHC.Types.D# ww3 } #)) -}
1b49951a8e625bfc61ced55155c545e7
  $wthing ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.display3 Main.myPoints w) -}
1c7d62eb6de57625f2c49ca691e8dfe9
  $wzDists ::
    Main.Flange
    -> Main.Flange
    -> GHC.Types.Double
    -> (# GHC.Types.Double, GHC.Types.Double #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Main.Flange)
                   (ww1 :: Main.Flange)
                   (ww2 :: GHC.Types.Double) ->
                 let {
                   hw :: GHC.Types.Double
                   = case ww2 of wild { GHC.Types.D# x2 ->
                     GHC.Types.D# (GHC.Prim./## x2 2.0##) }
                 } in
                 (# case hw of wild { GHC.Types.D# x2 ->
                    case ww of wild1 {
                      Main.JBendFlange ds ds1 ds2
                      -> case ds2 of wild2 { GHC.Types.D# y2 ->
                         GHC.Types.D# (GHC.Prim.-## x2 y2) }
                      Main.StraightPullFlange ds ds1 ds2 ds3
                      -> case ds2 of wild2 { GHC.Types.D# y2 ->
                         GHC.Types.D# (GHC.Prim.-## x2 y2) } } },
                    case hw of wild { GHC.Types.D# x2 ->
                    case ww1 of wild1 {
                      Main.JBendFlange ds ds1 ds2
                      -> case ds2 of wild2 { GHC.Types.D# y2 ->
                         GHC.Types.D# (GHC.Prim.-## x2 y2) }
                      Main.StraightPullFlange ds ds1 ds2 ds3
                      -> case ds2 of wild2 { GHC.Types.D# y2 ->
                         GHC.Types.D# (GHC.Prim.-## x2 y2) } } } #)) -}
bc0c866f62e2c36f49cf6132852a4e6b
  data Coords
    = CylinderCoords {r :: GHC.Types.Double,
                      phi :: GHC.Types.Double,
                      z :: GHC.Types.Double}
    | CartesianCoords {x :: GHC.Types.Double,
                       y :: GHC.Types.Double,
                       z :: GHC.Types.Double}
c98c0cb16cd2f56dadaa9cb176a6c28f
  data Flange
    = JBendFlange {flangeHoles :: GHC.Types.Int,
                   flangeDiameter :: GHC.Types.Double,
                   distance :: GHC.Types.Double}
    | StraightPullFlange {flangeHoles :: GHC.Types.Int,
                          flangeDiameter :: GHC.Types.Double,
                          distance :: GHC.Types.Double,
                          offSetFromMiddle :: GHC.Types.Double}
1c4581458fa7c85f1188c7d2914802d0
  data Hub
    = Hub {leftFlange :: Main.Flange,
           rightFlange :: Main.Flange,
           width :: GHC.Types.Double}
374d60452f68922d1897c6c3fcedfc47
  type LeftFlange = Main.Flange
c3c2b3a189dfcb92312ce3788d4d4b4f
  type NumberOfPairsPerSide = GHC.Types.Int
b2ceb6175a7a748145e4cd97c05918ab
  data Pattern
    = CrossedPattern {numberOfPairsPerSide :: GHC.Types.Int,
                      rimIntervals :: GHC.Types.Int}
94afe469b0753dcc273b86f16cf17c12
  type RightFlange = Main.Flange
b3c863aa9e3f8e8e9f5e4da5718abc12
  data Rim
    = Rim {rimHoles :: GHC.Types.Int,
           outerDiameter :: GHC.Types.Double,
           depth :: GHC.Types.Double,
           rimOffSet :: GHC.Types.Double}
74eb666ca6a874ffdcdcb011caf68491
  type RimIntervals = GHC.Types.Int
50d8ce2e1ca45429d07f96fa4aa6bc2f
  data Wheel
    = Wheel {hub :: Main.Hub,
             rim :: Main.Rim,
             pattern :: Main.Pattern,
             name :: [GHC.Types.Char]}
9df85299aa301e87f6f8729bd1f048c6
  aC32Narrow :: Main.Hub
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Hub
                   Main.aC32Narrow6
                   Main.aC32Narrow2
                   Main.aC32Narrow1) -}
0ca9b242573f6025a8ae423987f3aed7
  aC32Narrow1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 130.0##) -}
47411964ba21c9e7446819ef2576350c
  aC32Narrow2 :: Main.Flange
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Main.JBendFlange
                   Main.aC32Narrow5
                   Main.aC32Narrow4
                   Main.aC32Narrow3) -}
5ca0eee6ff2755b2d78f977d9472fb73
  aC32Narrow3 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 49.0##) -}
9e43fb199d1def2cbff107e069137ce3
  aC32Narrow4 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 66.0##) -}
29898e482faca11aa1cd4255aabfcd00
  aC32Narrow5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 16#) -}
8ca2959575ca8fa9ff5f0f0a1d2094c8
  aC32Narrow6 :: Main.Flange
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Main.JBendFlange
                   Main.aC32Narrow5
                   Main.aC32Narrow4
                   Main.aC32Narrow7) -}
acab36baab350cab85d6e053bb405de7
  aC32Narrow7 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 42.0##) -}
f62219c86ce72e149e79be51eab52308
  aC32Narrow_dT411_1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.aC32Narrow_dT411_2) -}
7e73173ffbbc493d63b961bd39e2dc38
  aC32Narrow_dT411_2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("aC32Narrow_dT411_32"#) -}
98b2ce3684d7e5b5bbf5a948418f8fd2
  aC32Narrow_dT411_32 :: Main.Wheel
  {- Strictness: m,
     Unfolding: (Main.Wheel
                   Main.aC32Narrow
                   Main.dT411_32
                   Main.threeCrossed32
                   Main.aC32Narrow_dT411_1) -}
839aec5d33a930b3bdbe42f99939a5af
  aC32Wide :: Main.Hub
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Hub
                   Main.aC32Wide1
                   Main.aC32Narrow2
                   Main.aC32Narrow1) -}
b5774ab905283c18f40ef5f63e417e2c
  aC32Wide1 :: Main.Flange
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Main.JBendFlange
                   Main.aC32Narrow5
                   Main.aC32Narrow4
                   Main.aC32Wide2) -}
ac2004d7a29a6a5bcf78cc68bf34ef3b
  aC32Wide2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 33.5##) -}
6124878c1c64535ae98b71b71f212362
  aC32Wide_dT411_1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.aC32Wide_dT411_2) -}
ad835bc5d82be19fe5534156957d5278
  aC32Wide_dT411_2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("aC32Wide_dT411_32"#) -}
fa59d549841a75143ab300598cbdeb59
  aC32Wide_dT411_32 :: Main.Wheel
  {- Strictness: m,
     Unfolding: (Main.Wheel
                   Main.aC32Wide
                   Main.dT411_32
                   Main.threeCrossed32
                   Main.aC32Wide_dT411_1) -}
67f71ff24c0af18d6f28db4c54340182
  dT411_1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 2.0##) -}
48199b3ffed5aaa39aa83663ff1e564d
  dT411_2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 13.0##) -}
428956a56c98b372b5c8408296346622
  dT411_3 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 622.0##) -}
5a18334768becfb0b2d5dbc7ba525f62
  dT411_32 :: Main.Rim
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Rim
                   Main.dT411_4
                   Main.dT411_3
                   Main.dT411_2
                   Main.dT411_1) -}
3f2bcd6948bea897cecdab0132149302
  dT411_4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 32#) -}
b3c863aa9e3f8e8e9f5e4da5718abc12
  depth :: Main.Rim -> GHC.Types.Double
  RecSel Left Main.Rim
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Rim) ->
                 case ds of wild { Main.Rim ds1 ds2 ds3 ds4 -> ds3 }) -}
e72d2a718e7e02a07b7531987a61b5b7
  display :: Graphics.UI.GLUT.Callbacks.Window.DisplayCallback
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.display1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
69d7838cca95ebc876387c7941a1cc35
  display1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Graphics.Rendering.OpenGL.GL.Framebuffer.clear1
                        Main.display7
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Graphics.GL.Functions.F01.ptr_glBegin of ds2 { GHC.Ptr.FunPtr ds3 ->
                 case GHC.Prim.getMaskingState# ipv of ds { (#,#) ipv2 ipv3 ->
                 case ipv3 of ds4 {
                   DEFAULT
                   -> case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                              -> GHC.Prim.Word#
                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds3
                             6##
                             ipv2 of wild { Unit# ds7 ->
                      case GHC.Prim.catch#
                             @ ()
                             @ GHC.Exception.SomeException
                             Main.display6
                             Main.display5
                             ds7 of ds5 { (#,#) ipv4 ipv5 ->
                      case Graphics.GL.Functions.F07.ptr_glEnd of ds6 { GHC.Ptr.FunPtr ds8 ->
                      case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds8
                             ipv4 of wild1 { Unit# ds9 ->
                      Graphics.GL.Functions.F07.glFlush1 ds9 } } } }
                   0#
                   -> case GHC.Prim.maskAsyncExceptions#
                             @ ()
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                                      -> GHC.Prim.Word#
                                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                                     ds3
                                     6##
                                     s1 of wild { Unit# ds7 ->
                              case GHC.Prim.catch#
                                     @ ()
                                     @ GHC.Exception.SomeException
                                     Main.display4
                                     Main.display5
                                     ds7 of ds5 { (#,#) ipv4 ipv5 ->
                              case Graphics.GL.Functions.F07.ptr_glEnd of ds6 { GHC.Ptr.FunPtr ds8 ->
                              case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                                     ds8
                                     ipv4 of wild1 { Unit# ds9 ->
                              (# ds9, ipv5 #) } } } })
                             ipv2 of ds5 { (#,#) ipv4 ipv5 ->
                      Graphics.GL.Functions.F07.glFlush1 ipv4 }
                   1#
                   -> case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                              -> GHC.Prim.Word#
                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds3
                             6##
                             ipv2 of wild { Unit# ds7 ->
                      case GHC.Prim.catch#
                             @ ()
                             @ GHC.Exception.SomeException
                             Main.display2
                             Main.display5
                             ds7 of ds5 { (#,#) ipv4 ipv5 ->
                      case Graphics.GL.Functions.F07.ptr_glEnd of ds6 { GHC.Ptr.FunPtr ds8 ->
                      case {__dyn_ccall_GC "" GHC.Prim.Addr#
                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             ds8
                             ipv4 of wild1 { Unit# ds9 ->
                      Graphics.GL.Functions.F07.glFlush1 ds9 } } } } } } } }) -}
07b4328aa99e13716370c9f6cedfec76
  display2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.Prim.maskUninterruptible# @ () Main.$wthing) -}
f04e55f94a79ebd86067d40afa2014ae
  display3 ::
    [(Graphics.GL.Types.GLfloat, Graphics.GL.Types.GLfloat,
      Graphics.GL.Types.GLfloat)]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
9ea9339be887f00bbec577cd727b0db4
  display4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.Prim.unmaskAsyncExceptions# @ () Main.$wthing) -}
5c9c45ea84a09d1da1c40c527fff3303
  display5 ::
    GHC.Exception.SomeException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <B,U><B,U>x -}
82070b3a9f11071b45b42c9d9b38e606
  display6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.Prim.maskAsyncExceptions# @ () Main.$wthing) -}
ca1831bbb861b1a2791a392aef033b84
  display7 :: [Graphics.Rendering.OpenGL.GL.Framebuffer.ClearBuffer]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Graphics.Rendering.OpenGL.GL.Framebuffer.ClearBuffer
                   Graphics.Rendering.OpenGL.GL.Framebuffer.ColorBuffer
                   (GHC.Types.[]
                      @ Graphics.Rendering.OpenGL.GL.Framebuffer.ClearBuffer)) -}
c98c0cb16cd2f56dadaa9cb176a6c28f
  distance :: Main.Flange -> GHC.Types.Double
  RecSel Left Main.Flange
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Flange) ->
                 case ds of wild {
                   Main.JBendFlange ds1 ds2 ds3 -> ds3
                   Main.StraightPullFlange ds1 ds2 ds3 ds4 -> ds3 }) -}
17ad3661e806824ae2595c450c708c00
  dtSpline1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0##) -}
8cf00412fc445d0f41ea18ec4466ea15
  dtSpline2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 12.5##) -}
3d59963f86cdf7b0ce5f4eca49fb3fa3
  dtSpline24 :: Main.Rim
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Rim
                   Main.dtSpline3
                   Main.dT411_3
                   Main.dtSpline2
                   Main.dtSpline1) -}
e84552129c039abe996c7a283a4022d7
  dtSpline24Rear :: Main.Hub
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Hub
                   Main.dtSpline24Rear5
                   Main.dtSpline24Rear1
                   Main.aC32Narrow1) -}
ee2cc6d597687e136f5a45090df85307
  dtSpline24Rear1 :: Main.Flange
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.StraightPullFlange
                   Main.dtSpline24Rear4
                   Main.dtSpline24Rear3
                   Main.dtSpline24Rear2
                   Main.dtSpline1) -}
8351a31a971689cbe6a1108e9fd907ff
  dtSpline24Rear2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 50.0##) -}
c20a3fcfb78391650d481e30f9546fd2
  dtSpline24Rear3 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 47.0##) -}
13d96d3d455b28ceb6023ac05bb85363
  dtSpline24Rear4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 12#) -}
b2ee86bcd9da2fc865f19dfb5425e6fc
  dtSpline24Rear5 :: Main.Flange
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.StraightPullFlange
                   Main.dtSpline24Rear4
                   Main.dtSpline24Rear7
                   Main.dtSpline24Rear6
                   Main.dtSpline1) -}
95dc05ac808d46ddcb6b400d8de90205
  dtSpline24Rear6 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 30.0##) -}
1c48f8cfb70de3151d73022322e97396
  dtSpline24Rear7 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 40.0##) -}
c8bd6ef7b6a431d7a64024af9bb9f6e6
  dtSpline24Rear_org :: Main.Wheel
  {- Strictness: m,
     Unfolding: (Main.Wheel
                   Main.dtSpline24Rear
                   Main.dtSpline24
                   Main.spline24
                   Main.dtSpline24Rear_org1) -}
8cad674c254837f93a14835a5a3cd834
  dtSpline24Rear_org1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.dtSpline24Rear_org2) -}
8e6af68bd4cf69bb8d04d1ab5619419a
  dtSpline24Rear_org2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("dtSpline24Rear_org"#) -}
b76761d001403bd2039230b7ac039e5d
  dtSpline24Rear_rx38D :: Main.Wheel
  {- Strictness: m,
     Unfolding: (Main.Wheel
                   Main.dtSpline24Rear
                   Main.rx38D
                   Main.spline24
                   Main.dtSpline24Rear_rx38D1) -}
33829f78caaa84ddc22a717e0cbcca84
  dtSpline24Rear_rx38D1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Main.dtSpline24Rear_rx38D2) -}
c690d35e75967d4dc3279d0c54f1c2bd
  dtSpline24Rear_rx38D2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("dtSpline24Rear_rx38D"#) -}
eee9293dcf2c9577f25c8e33f9e3c7ae
  dtSpline3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 24#) -}
1aa42319dec46a59a46ef2968c262627
  erd :: Main.Rim -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LS(S)S(S)L),1*U(A,1*U(U),1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (r2 :: Main.Rim) ->
                 case r2 of wild { Main.Rim ds ds1 ds2 ds3 ->
                 case ds1 of wild1 { GHC.Types.D# x2 ->
                 case ds2 of wild2 { GHC.Types.D# y2 ->
                 GHC.Types.D# (GHC.Prim.-## x2 (GHC.Prim.+## y2 y2)) } } }) -}
c98c0cb16cd2f56dadaa9cb176a6c28f
  flangeDiameter :: Main.Flange -> GHC.Types.Double
  RecSel Left Main.Flange
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Flange) ->
                 case ds of wild {
                   Main.JBendFlange ds1 ds2 ds3 -> ds2
                   Main.StraightPullFlange ds1 ds2 ds3 ds4 -> ds2 }) -}
c98c0cb16cd2f56dadaa9cb176a6c28f
  flangeHoles :: Main.Flange -> GHC.Types.Int
  RecSel Left Main.Flange
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Flange) ->
                 case ds of wild {
                   Main.JBendFlange ds1 ds2 ds3 -> ds1
                   Main.StraightPullFlange ds1 ds2 ds3 ds4 -> ds1 }) -}
eb4a4fe454d41e06bc5a892923984072
  greet :: [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (name1 :: [GHC.Types.Char])
                   (timeStr :: [GHC.Types.Char]) ->
                 GHC.CString.unpackAppendCString#
                   Main.greet2
                   (GHC.Base.++
                      @ GHC.Types.Char
                      name1
                      (GHC.CString.unpackAppendCString# Main.greet1 timeStr))) -}
cfbfbb4fbfa10ac7c9aeffb144995b06
  greet1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("! It is now"#) -}
164dab1404bc0ebb57fd30a9552b142d
  greet2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Hello "#) -}
50d8ce2e1ca45429d07f96fa4aa6bc2f
  hub :: Main.Wheel -> Main.Hub
  RecSel Left Main.Wheel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Wheel) ->
                 case ds of wild { Main.Wheel ds1 ds2 ds3 ds4 -> ds1 }) -}
1c4581458fa7c85f1188c7d2914802d0
  leftFlange :: Main.Hub -> Main.Flange
  RecSel Left Main.Hub
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Hub) ->
                 case ds of wild { Main.Hub ds1 ds2 ds3 -> ds1 }) -}
2accce2aa70be0a3ebd0293fe6dff656
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
9a43e5123fa54b2d0f225f65b4bd1b94
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Data.Time.Clock.POSIX.getCurrentTime1
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        (GHC.CString.unpackAppendCString#
                           Main.greet2
                           (GHC.CString.unpackAppendCString#
                              Main.main22
                              (GHC.CString.unpackAppendCString#
                                 Main.greet1
                                 (Data.Time.LocalTime.Internal.ZonedTime.$fShowUTCTime_$cshow
                                    ipv1))))
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main21
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main20
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main19
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main15
                        GHC.Types.True
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main11
                        GHC.Types.True
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main10
                        GHC.Types.True
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main6
                        GHC.Types.True
                        ipv14 of ds9 { (#,#) ipv16 ipv17 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True
                   ipv16 } } } } } } } } }) -}
b2f24235453fdeecd946986c1bf1dbfb
  main10 :: [GHC.Types.Char]
  {- Unfolding: (Main.spokeLengthStr Main.dtSpline24Rear_rx38D) -}
be1185adef13dfe653d20fd1dc810377
  main11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main14
                   Main.main12) -}
1b6c7ac0267ac108ab5c4e0eb61ea002
  main12 :: [GHC.Types.Char]
  {- Unfolding: (case GHC.Show.$w$cshowsPrec4
                        0#
                        Main.main13
                        (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                 GHC.Types.: @ GHC.Types.Char ww3 ww4 }) -}
81eb2a4eef9f0c2f38415186674fdb23
  main13 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (294) -}
2819da838e585fdc52c08f757de7f078
  main14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("right measured: "#) -}
849bb174ed0d3748cf03640c0bbdd519
  main15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main18
                   Main.main16) -}
32f70a37290eddd6619c7afb7623aae4
  main16 :: [GHC.Types.Char]
  {- Unfolding: (case GHC.Show.$w$cshowsPrec4
                        0#
                        Main.main17
                        (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                 GHC.Types.: @ GHC.Types.Char ww3 ww4 }) -}
483407e49e3dddbda95af39ff92d2890
  main17 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (297) -}
d8efb59f1f61bfe7d7ce056aed429e0c
  main18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("left measured: "#) -}
4ecc71b6662a14df05b111ba3ad3f0c2
  main19 :: [GHC.Types.Char]
  {- Unfolding: (Main.spokeLengthStr Main.dtSpline24Rear_org) -}
fbf467dcababf561926eea383f1d5f94
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main5
                   Main.main3) -}
3a6e792bc6738ef26de3cb17a462f570
  main20 :: [GHC.Types.Char]
  {- Unfolding: (Main.spokeLengthStr Main.aC32Narrow_dT411_32) -}
bd8133c7701afc60d146b9be5d3caafa
  main21 :: [GHC.Types.Char]
  {- Unfolding: (Main.spokeLengthStr Main.aC32Wide_dT411_32) -}
86af33350ff72473372234c464248f4f
  main22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Markus"#) -}
49588c3142c124d6a3c53b5f3619c9ec
  main23 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
65992212db5c04f443981a9aadb8f13e
  main3 :: GHC.Base.String
  {- Unfolding: (Main.main4 (GHC.Types.[] @ GHC.Types.Char)) -}
a2ca66f93f1a91bac545a7a055ede6f5
  main4 :: GHC.Show.ShowS
  {- Unfolding: (GHC.Float.$w$sshowSignedFloat
                   GHC.Float.$fShowDouble2
                   GHC.Float.minExpt
                   280.5##) -}
fa94cdaeb6d7598955c9117b8be6adcf
  main5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("right from rim comparison: "#) -}
f28327ccc8b8fddc80da09ae7ffe9f22
  main6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Main.main9
                   Main.main7) -}
dc3e971063879e20adf9d59801f310ce
  main7 :: GHC.Base.String
  {- Unfolding: (Main.main8 (GHC.Types.[] @ GHC.Types.Char)) -}
ca43052c29f9ab45edd91dccda775b5c
  main8 :: GHC.Show.ShowS
  {- Unfolding: (GHC.Float.$w$sshowSignedFloat
                   GHC.Float.$fShowDouble2
                   GHC.Float.minExpt
                   283.5##) -}
a715d7e6eac83eb935c736c2b4e9ed29
  main9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("left from rim comparison: "#) -}
5a78486363edcd6d5a761f3a3b742232
  myPoints ::
    [(Graphics.GL.Types.GLfloat, Graphics.GL.Types.GLfloat,
      Graphics.GL.Types.GLfloat)]
  {- Unfolding: (Main.myPoints_go
                   (GHC.Real.numericEnumFromTo
                      @ GHC.Types.Float
                      GHC.Classes.$fOrdFloat
                      GHC.Float.$fFractionalFloat
                      Main.myPoints2
                      Main.myPoints1)) -}
199c6bd8511de9760d1d25fb4fdb4575
  myPoints1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 12.0#) -}
77367c43ebb0111c890174ef2faf017c
  myPoints2 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
de24f181d5d0536fa14dff081a9ee60b
  myPoints_go ::
    [Graphics.GL.Types.GLfloat]
    -> [(Graphics.GL.Types.GLfloat, Graphics.GL.Types.GLfloat,
         Graphics.GL.Types.GLfloat)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
50d8ce2e1ca45429d07f96fa4aa6bc2f
  name :: Main.Wheel -> [GHC.Types.Char]
  RecSel Left Main.Wheel
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Wheel) ->
                 case ds of wild { Main.Wheel ds1 ds2 ds3 ds4 -> ds4 }) -}
557ab5bdedd3967f9bb7840140aea1b9
  norm :: Main.Coords -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Coords) ->
                 case Main.$wnorm w of ww { DEFAULT -> GHC.Types.D# ww }) -}
faec778ccc4eb44548ac66e87ce913e2
  numberOfHubHoles :: Main.Pattern -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S(S)L),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Pattern) ->
                 case ds of wild { Main.CrossedPattern np ds1 ->
                 case np of wild1 { GHC.Types.I# x2 ->
                 GHC.Types.I# (GHC.Prim.*# x2 4#) } }) -}
b2ceb6175a7a748145e4cd97c05918ab
  numberOfPairsPerSide :: Main.Pattern -> GHC.Types.Int
  RecSel Left Main.Pattern
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Pattern) ->
                 case ds of wild { Main.CrossedPattern ds1 ds2 -> ds1 }) -}
c98c0cb16cd2f56dadaa9cb176a6c28f
  offSetFromMiddle :: Main.Flange -> GHC.Types.Double
  RecSel Left Main.Flange
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Flange) ->
                 case ds of wild {
                   Main.JBendFlange ipv ipv1 ipv2 -> Main.offSetFromMiddle1
                   Main.StraightPullFlange ds1 ds2 ds3 ds4 -> ds4 }) -}
b406b2280a855f7ce85d3de8dc8b922d
  offSetFromMiddle1 :: GHC.Types.Double
  {- Strictness: x -}
b3c863aa9e3f8e8e9f5e4da5718abc12
  outerDiameter :: Main.Rim -> GHC.Types.Double
  RecSel Left Main.Rim
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Rim) ->
                 case ds of wild { Main.Rim ds1 ds2 ds3 ds4 -> ds2 }) -}
99893ce69692233f9a8a2eefaef11c1a
  p1 :: Main.Coords
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.CartesianCoords Main.p2 Main.p2 Main.p2) -}
0cc83b7d2b3cdcf83529944a8f2f1cb4
  p2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.0##) -}
50d8ce2e1ca45429d07f96fa4aa6bc2f
  pattern :: Main.Wheel -> Main.Pattern
  RecSel Left Main.Wheel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Wheel) ->
                 case ds of wild { Main.Wheel ds1 ds2 ds3 ds4 -> ds3 }) -}
f7a5e3ba6e282041fb4fb947a63f66da
  pc1 :: Main.Coords
  {- Strictness: m1,
     Unfolding: (Main.CylinderCoords Main.pc3 Main.pc2 Main.p2) -}
e4c500a492334527e7bef61e89ff1b75
  pc2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.D# 0.7853981633974483##) -}
3b260ed1b94c066d9b3375dd8913a25d
  pc3 :: GHC.Types.Double
  {- Strictness: m,
     Unfolding: (GHC.Types.D# (GHC.Prim.sqrtDouble# 2.0##)) -}
bc0c866f62e2c36f49cf6132852a4e6b
  phi :: Main.Coords -> GHC.Types.Double
  RecSel Left Main.Coords
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Coords) ->
                 case ds of wild {
                   Main.CylinderCoords ds1 ds2 ds3 -> ds2
                   Main.CartesianCoords ipv ipv1 ipv2 -> Main.phi1 }) -}
f680dc2005054eb599376da924afc68b
  phi1 :: GHC.Types.Double
  {- Strictness: x -}
0a1106d0d893b249b2c8efde4485bf9e
  phiOneHub :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 45.0##) -}
04e05a83a9384ebf073605a9b3cdaae5
  pointDistance :: Main.Coords -> Main.Coords -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Coords) (w1 :: Main.Coords) ->
                 case Main.$wpointDistance w w1 of ww { DEFAULT ->
                 GHC.Types.D# ww }) -}
eaa6e61720da37504db66063e4fac2fe
  printConfig :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.printConfig1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
4dfd0343525e5dc3a9068ffcb1360b65
  printConfig1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.printConfig2
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   ipv3
                   GHC.Types.True
                   ipv2 } }) -}
3c301a18fe2a312db898d8b89191e54a
  printConfig2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.printConfig3) -}
5783c962e01c37b168b75d88e471e321
  printConfig3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("stack.yaml"#) -}
bc0c866f62e2c36f49cf6132852a4e6b
  r :: Main.Coords -> GHC.Types.Double
  RecSel Left Main.Coords
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Coords) ->
                 case ds of wild {
                   Main.CylinderCoords ds1 ds2 ds3 -> ds1
                   Main.CartesianCoords ipv ipv1 ipv2 -> Main.r1 }) -}
078a102b44461011eb443226959a6fbd
  r1 :: GHC.Types.Double
  {- Strictness: x -}
1c4581458fa7c85f1188c7d2914802d0
  rightFlange :: Main.Hub -> Main.Flange
  RecSel Left Main.Hub
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Hub) ->
                 case ds of wild { Main.Hub ds1 ds2 ds3 -> ds2 }) -}
50d8ce2e1ca45429d07f96fa4aa6bc2f
  rim :: Main.Wheel -> Main.Rim
  RecSel Left Main.Wheel
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U,U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Wheel) ->
                 case ds of wild { Main.Wheel ds1 ds2 ds3 ds4 -> ds2 }) -}
b3c863aa9e3f8e8e9f5e4da5718abc12
  rimHoles :: Main.Rim -> GHC.Types.Int
  RecSel Left Main.Rim
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Rim) ->
                 case ds of wild { Main.Rim ds1 ds2 ds3 ds4 -> ds1 }) -}
b2ceb6175a7a748145e4cd97c05918ab
  rimIntervals :: Main.Pattern -> GHC.Types.Int
  RecSel Left Main.Pattern
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Pattern) ->
                 case ds of wild { Main.CrossedPattern ds1 ds2 -> ds2 }) -}
b3c863aa9e3f8e8e9f5e4da5718abc12
  rimOffSet :: Main.Rim -> GHC.Types.Double
  RecSel Left Main.Rim
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Rim) ->
                 case ds of wild { Main.Rim ds1 ds2 ds3 ds4 -> ds4 }) -}
31c5af2137a59e9c2032b8092ff2e150
  rx38D :: Main.Rim
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Rim
                   Main.dtSpline3
                   Main.dT411_3
                   Main.rx38D1
                   Main.dT411_1) -}
03b7a76a615580e2ad577597bacdc97d
  rx38D1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 26.0##) -}
21097630787492ec49ebf9fceaaf690c
  spline1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 6#) -}
61816a8c72364830dc7d785619bdbdb2
  spline24 :: Main.Pattern
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.CrossedPattern Main.spline1 Main.threeCrossed1) -}
9bdaf29b214ae5ed4bb778062e1c9e78
  spokeLengthStr :: Main.Wheel -> [GHC.Types.Char]
  {- Arity: 1,
     Strictness: <L,1*U(U(U,U,U(U)),U(A,U(U),U(U),U(U)),1*U(1*U(U),1*U(U)),1*U)>,
     Unfolding: (\ (wheel :: Main.Wheel) ->
                 GHC.CString.unpackAppendCString#
                   Main.spokeLengthStr3
                   (case wheel of wild { Main.Wheel ds ds1 ds2 ds3 ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      ds3
                      (GHC.CString.unpackAppendCString#
                         Main.spokeLengthStr2
                         (case Main.$wspokeLengths ds ds1 ds2 of ww { (#,#) ww1 ww2 ->
                          case ww1 of ww3 { GHC.Types.D# ww4 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            (GHC.Float.$w$sshowSignedFloat
                               GHC.Float.$fShowDouble2
                               GHC.Float.minExpt
                               ww4
                               (GHC.Types.[] @ GHC.Types.Char))
                            (GHC.CString.unpackAppendCString#
                               Main.spokeLengthStr1
                               (case ww2 of ww5 { GHC.Types.D# ww6 ->
                                GHC.Float.$w$sshowSignedFloat
                                  GHC.Float.$fShowDouble2
                                  GHC.Float.minExpt
                                  ww6
                                  (GHC.Types.[] @ GHC.Types.Char) })) } })) })) -}
8f509799a1ffad680fbf5d7eba702fbe
  spokeLengthStr1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \right:"#) -}
806318264e25770a1638453fd884b9c2
  spokeLengthStr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \ left:"#) -}
e040ed05c9a428100f8db27e92ce1f49
  spokeLengthStr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \Wheel:"#) -}
f31932c6665bf56f66c5c8a9099c67a5
  spokeLengths :: Main.Wheel -> (GHC.Types.Double, GHC.Types.Double)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U(U,U,U(U)),U(A,U(U),U(U),U(U)),1*U(1*U(U),1*U(U)),A)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Wheel) ->
                 case w of ww { Main.Wheel ww1 ww2 ww3 ww4 ->
                 case Main.$wspokeLengths ww1 ww2 ww3 of ww5 { (#,#) ww6 ww7 ->
                 (ww6, ww7) } }) -}
e22d8cf11bc1b5a325a2100e9ccaf7d1
  threeCrossed1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
fa4516cbe47e22c6e9f75c46148aab3a
  threeCrossed2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
704395f987f490c10bd4fbd139e13c89
  threeCrossed32 :: Main.Pattern
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.CrossedPattern
                   Main.threeCrossed2
                   Main.threeCrossed1) -}
b02562ae8b600f94fab54443d7d23ae0
  toCartesian :: Main.Coords -> Main.Coords
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Main.Coords) ->
                 case ds of wild {
                   Main.CylinderCoords r2 phi2 z1
                   -> Main.CartesianCoords
                        (case r2 of wild1 { GHC.Types.D# x2 ->
                         case phi2 of wild2 { GHC.Types.D# x3 ->
                         GHC.Types.D# (GHC.Prim.*## x2 (GHC.Prim.cosDouble# x3)) } })
                        (case r2 of wild1 { GHC.Types.D# x2 ->
                         case phi2 of wild2 { GHC.Types.D# x3 ->
                         GHC.Types.D# (GHC.Prim.*## x2 (GHC.Prim.sinDouble# x3)) } })
                        z1
                   Main.CartesianCoords ipv ipv1 ipv2 -> wild }) -}
1c4581458fa7c85f1188c7d2914802d0
  width :: Main.Hub -> GHC.Types.Double
  RecSel Left Main.Hub
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Hub) ->
                 case ds of wild { Main.Hub ds1 ds2 ds3 -> ds3 }) -}
bc0c866f62e2c36f49cf6132852a4e6b
  x :: Main.Coords -> GHC.Types.Double
  RecSel Left Main.Coords
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Coords) ->
                 case ds of wild {
                   Main.CylinderCoords ipv ipv1 ipv2 -> Main.x1
                   Main.CartesianCoords ds1 ds2 ds3 -> ds1 }) -}
9cdc712345937b5c3bd91f0f10afe142
  x1 :: GHC.Types.Double
  {- Strictness: x -}
bc0c866f62e2c36f49cf6132852a4e6b
  y :: Main.Coords -> GHC.Types.Double
  RecSel Left Main.Coords
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Coords) ->
                 case ds of wild {
                   Main.CylinderCoords ipv ipv1 ipv2 -> Main.y1
                   Main.CartesianCoords ds1 ds2 ds3 -> ds2 }) -}
dbbd96246d0aab8258d778f2d52b3e05
  y1 :: GHC.Types.Double
  {- Strictness: x -}
bc0c866f62e2c36f49cf6132852a4e6b
  z :: Main.Coords -> GHC.Types.Double
  RecSel Left Main.Coords
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Coords) ->
                 case ds of wild {
                   Main.CylinderCoords ds1 ds2 ds3 -> ds3
                   Main.CartesianCoords ds1 ds2 ds3 -> ds3 }) -}
53d22a9e4703c33cf4918606526e4b6b
  zDists :: Main.Hub -> (GHC.Types.Double, GHC.Types.Double)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,1*U,1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Hub) ->
                 case w of ww { Main.Hub ww1 ww2 ww3 ->
                 case Main.$wzDists ww1 ww2 ww3 of ww4 { (#,#) ww5 ww6 ->
                 (ww5, ww6) } }) -}
instance GHC.Show.Show [Main.Coords] = Main.$fShowCoords
instance GHC.Show.Show [Main.Flange] = Main.$fShowFlange
instance GHC.Show.Show [Main.Hub] = Main.$fShowHub
instance GHC.Show.Show [Main.Pattern] = Main.$fShowPattern
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

